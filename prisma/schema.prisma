generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  surname   String
  username  String   @unique
  password  String
  phone     String
  role      Role     @default(CUSTOMER)
  Order     Order[]
  assignedProducts Product[] @relation("AssignedTo")
  createdAt DateTime  @default(now())
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  price       Decimal
  image       String?
  date        String?
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  assignedTo  User?     @relation("AssignedTo", fields: [assignedToId], references: [id])
  index String?
  uslug String?
  assignedToId Int?
  createdAt   DateTime  @default(now())
  orderItems  OrderItem[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  image       String?
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
}

model Table {
  id        Int         @id @default(autoincrement())
  name      String
  number    String      @unique
  status    TableStatus @default(empty)
  orders    Order[]
  createdAt DateTime    @default(now())
}

model Order {
  id            Int         @id @default(autoincrement())
  table         Table?      @relation(fields: [tableId], references: [id])
  tableId       Int?
  status        OrderStatus @default(PENDING)
  totalPrice    Int
  user          User?       @relation(fields: [userId], references: [id])
  userId        Int?
  carrierNumber String?
  createdAt     DateTime    @default(now())
  orderItems    OrderItem[]
}

model OrderItem {
  id         Int             @id @default(autoincrement())
  order      Order           @relation(fields: [orderId], references: [id])
  orderId    Int
  product    Product         @relation(fields: [productId], references: [id])
  productId  Int
  count      Int
  status     OrderItemStatus @default(PENDING)
  preparedAt DateTime?
  createdAt  DateTime        @default(now())
}

model Percent {
  id        Int      @id @default(autoincrement())
  percent   Float
  createdAt DateTime @default(now())
}

model AuthCheck{
  id        Int      @id @default(autoincrement())
  status Boolean? @default(false)
}

enum Role {
  CUSTOMER
  CASHIER
  KITCHEN
  BIGADMIN
}

enum OrderStatus {
  PENDING
  COOKING
  READY
  COMPLETED
  ARCHIVE
}

enum OrderItemStatus {
  PENDING
  COOKING
  READY
  COMPLETED
  ARCHIVE
}

enum TableStatus {
  empty
  busy
}